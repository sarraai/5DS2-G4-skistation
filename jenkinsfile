pipeline {
    environment {
        registry = "sarraai/skiexam"
        registryCredential = 'dockerHub'
        dockerImage = ''
    }
    agent any

    stages {
        
        // 1. Checkout SCM
        stage('CHECKOUT GIT') {
            steps {
                echo 'Cloning GitHub repository...'
                git branch: 'sarra', url: 'https://github.com/sarraai/5DS2-G4-skistation.git'
            }
        }

        // 2. Maven Clean
        stage('MVN CLEAN') {
            steps {
                echo 'Running Maven clean...'
                sh 'mvn -f gestion-station-ski/pom.xml clean' // Update path here if necessary
            }
        }

        // 3. Artifact Construction
        stage('ARTIFACT CONSTRUCTION') {
            steps {
                echo 'Building Maven package...'
                sh 'mvn -f gestion-station-ski/pom.xml package -Dmaven.test.skip=true -P test-coverage' // Ensure correct path
            }
        }

        // 4. Check Database Connection
        stage('CHECK DATABASE CONNECTION') {
            steps {
                script {
                    echo 'Checking database connection...'
                    def dbHost = 'your_database_host' // Replace with your database host
                    def dbPort = 'your_database_port' // Replace with your database port
                    def dbUser = 'your_database_user' // Replace with your database username
                    def dbPassword = 'your_database_password' // Replace with your database password

                    // Attempt to connect to the database
                    try {
                        sh """
                            echo "SELECT 1;" | mysql -h ${dbHost} -P ${dbPort} -u ${dbUser} -p${dbPassword}
                        """
                    } catch (err) {
                        error("Database connection failed: ${err}")
                    }
                }
            }
        }

        // 5. Unit Testing with JUnit
        stage('Unit Testing with JUnit') {
            steps {
                echo 'Executing Unit Tests...'
                sh 'mvn -f gestion-station-ski/pom.xml test' // Ensure correct path
            }
        }

        // 6. Code Quality Check with SonarQube
        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withCredentials([string(credentialsId: 'devops_project', variable: 'dckr_pat_7kWM12VTv9eWmsh0_bGuqOnIzis')]) {
                    sh 'mvn sonar:sonar -Dsonar.projectKey=5ds2_g1_kaddem -Dsonar.host.url=http://localhost:9000 -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }

        // 7. Package Artifact with Maven
        stage('Maven Package') {
            steps {
                echo 'Packaging application...'
                sh 'mvn package -DskipTests'
            }
        }

        // 8. Deploy to Nexus Repository
        stage('Nexus Deployment') {
            steps {
                echo 'Deploying to Nexus...'
                sh 'mvn deploy -DskipTests'
            }
        }

        // 9. Docker Image Creation
        stage('Docker Image Creation') {
            steps {
                echo 'Building Docker Image...'
                sh 'docker build -t khaledchaabouni/5ds2_g1_kaddem:1.0.0 .'
            }
        }

        // 10. Push Docker Image to Docker Hub
        stage('Push Docker Image to Docker Hub') {
            steps {
                echo 'Pushing Docker Image to Docker Hub...'
                sh 'docker login -u khaledchaabouni -p dckr_pat_7kWM12VTv9eWmsh0_bGuqOnIzis'
                sh 'docker push khaledchaabouni/5ds2_g1_kaddem:1.0.0'
            }
        }

        // 11. Docker Compose to Launch Services
        stage('Docker Compose Setup') {
            steps {
                echo 'Starting services with Docker Compose...'
                sh 'docker compose up -d'
            }
        }

        // 12. Launch Prometheus
        stage('Launch Prometheus') {
            steps {
                echo 'Starting Prometheus for monitoring...'
                sh 'docker run -d --name prometheus -p 9090:9090 prom/prometheus'
            }
        }

        // 13. Launch Grafana
        stage('Launch Grafana') {
            steps {
                echo 'Starting Grafana for visualization...'
                sh 'docker run -d --name grafana -p 3000:3000 grafana/grafana'
            }
        }
    }
}


